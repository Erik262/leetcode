{
    "notebook.formatOnSave.enabled": true,
    "notebook.codeActionsOnSave": {
        "notebook.source.organizeImports": "explicit",
        "notebook.source.fixAll": "explicit"
    },
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.formatOnType": true,
        "diffEditor.ignoreTrimWhitespace": false,
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit",
            "source.fixAll": "explicit"
        },
    },
    "python.analysis.ignore": [
        "*"
    ],
    "workbench.colorCustomizations": {
        "tab.activeBorder": "#ffcc66",
        "editorHoverWidget.background": "#1E2227b9",
        "separators.functions.borderColor": "#808591",
        "separators.methods.borderColor": "#808591",
        "terminal.background": "#00000000"
    },
    "editor.accessibilitySupport": "off",
    "editor.formatOnPaste": true,
    "editor.inlineSuggest.enabled": true,
    "editor.minimap.enabled": false,
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "editor.unicodeHighlight.invisibleCharacters": false,
    "explorer.confirmDragAndDrop": false,
    "files.associations": {
        "*.rmd": "markdown"
    },
    "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",
    "git.openRepositoryInParentFolders": "always",
    "github.copilot.enable": {
        "*": true,
        "plaintext": false,
        "markdown": false,
        "scminput": false,
        "yaml": false,
        "swift": false,
        "python": true
    },
    "jupyter.askForKernelRestart": false,
    "python.analysis.typeCheckingMode": "basic",
    "python.terminal.activateEnvironment": true,
    "security.workspace.trust.enabled": false,
    "settingsSync.ignoredSettings": [
        "window.restoreWindows"
    ],
    "workbench.startupEditor": "none",
    "editor.autoClosingBrackets": "always",
    "python.analysis.completeFunctionParens": true,
    "diffEditor.maxComputationTime": 0,
    "window.commandCenter": true,
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "window.restoreWindows": "none",
    "launch": {
        "configurations": [],
        "compounds": []
    },
    "editor.hover.delay": 1000,
    "window.openFilesInNewWindow": "on",
    "github.copilot.advanced": {},
    "symbols.hidesExplorerArrows": false,
    "editor.fontSize": 11.5,
    "diffEditor.ignoreTrimWhitespace": false,
    "settingsSync.ignoredExtensions": [
        "ms-dotnettools.vscode-dotnet-runtime"
    ],
    "git.autofetch": true,
    "git.confirmSync": false,
    "gitlens.graph.layout": "editor",
    // "workbench.colorTheme": "One Dark Pro Darker",
    "gitlens.plusFeatures.enabled": false,
    "debug.toolBarLocation": "commandCenter",
    "git-graph.repository.commits.fetchAvatars": true,
    "git.enableSmartCommit": true,
    "git.autoStash": true,
    "files.exclude": {
        "**/.git": false
    },
    "editor.linkedEditing": true,
    "multiDiffEditor.experimental.enabled": true,
    "editor.occurrencesHighlight": "multiFile",
    "terminal.integrated.stickyScroll.enabled": true,
    "git.ignoreRebaseWarning": true,
    "jupyter.debugJustMyCode": false,
    "notebook.stickyScroll.enabled": true,
    "testing.openTesting": "openOnTestFailure",
    "terminal.integrated.shellIntegration.suggestEnabled": true,
    "csv-edit.readOption_hasHeader": "true",
    "git.mergeEditor": true,
    "hexeditor.columnWidth": 16,
    "hexeditor.showDecodedText": true,
    "hexeditor.defaultEndianness": "little",
    "hexeditor.inspectorType": "aside",
    "remote.autoForwardPortsSource": "hybrid",
    "3dpreview.hideControlsOnStart": true,
    "jupyter.widgetScriptSources": [
        "jsdelivr.com",
        "unpkg.com"
    ],
    "vs-kubernetes": {
        "vscode-kubernetes.kubectl-path-mac": "/Users/erik/.vs-kubernetes/tools/kubectl/kubectl",
        "vscode-kubernetes.helm-path-mac": "/Users/erik/.vs-kubernetes/tools/helm/darwin-amd64/helm"
    },
    "code-runner.clearPreviousOutput": true,
    "code-runner.saveAllFilesBeforeRun": true,
    "code-runner.saveFileBeforeRun": true,
    "code-runner.enableAppInsights": false,
    "todohighlight.isEnable": true,
    "todohighlight.isCaseSensitive": true,
    "todohighlight.keywords": [
        // "FIXME:", // without further details, this will use the defaultStyle
        // "REVIEW:", // as will this
        // now for a more complex example
        {
            "text": "INFO:", // without a defined regex pattern this is the string that will be matched
            "color": "green",
            "backgroundColor": "rgba(0,0,0,0)", // INFO: setting the last parameter to zero (alpha channel) disables the background colour
            "border": "none",
            "isWholeLine": false
        },
        {
            "text": "REVIEW:", // without a defined regex pattern this is the string that will be matched
            "color": "orange",
            "backgroundColor": "rgba(0,0,0,0)", // INFO: setting the last parameter to zero (alpha channel) disables the background colour
            "border": "none",
            "isWholeLine": false
        },
        {
            "text": "WARNING:",
            "before": {
                "contentText": "⚠️" // adds text before the highlight
            },
            "after": {
                "contentText": "⚠️" // adds text after the highlight
            },
            "color": "red",
            "border": "1px solid red",
            "borderRadius": "2px", // NOTE: use borderRadius along with `border` or you will see nothing change
            "backgroundColor": "rgba(0,0,0,.2)",
            "diagnosticSeverity": "warning" // Set diagnostic severity to `none`, `information`, `warning` or `error`
        },
        {
            "text": "TODO(string):", // with a regex pattern defined, this setting isn't used, but is useful as a name for this section
            "regex": {
                "pattern": "(?<=^|\"|\\s)TODO(\\(\\w+\\))?:" // this allows for TODO: or TODO(Bob): etc.
            },
            "color": "red",
            "border": "1px solid red",
            "borderRadius": "2px", //NOTE: use borderRadius along with `border` or you will see nothing change
            "backgroundColor": "rgba(0,0,0,.2)"
        },
        {
            "text": "FIXME(string):",
            "regex": {
                "pattern": "(?<=^|\"|\\s)FIXME(\\(\\w+\\))?:"
            },
            "color": "white",
            "border": "1px solid red",
            "borderRadius": "2px",
            "backgroundColor": "rgba(0,0,0,.2)"
        },
        {
            "text": "NOTE:", // with a regex pattern defined, this setting isn't used, but is useful as a name for this section
            "color": "yellow",
            "backgroundColor": "rgba(0,0,0,0)",
            "border": "none",
            // "overviewRulerColor": "grey",
            "regex": {
                "pattern": "(?<=^|\"|\\s)NOTE[:]?(?!\\w)" // in this example, highlight `NOTE:` with or without the `:` and that's not part of another word.  (I.e.: The above will highlight 'NOTE' but not the "note" in 'SIDENOTE').
                /**
              * Positive lookbehind (`(?<=...)`) is only supported in Node.js v9 and up.
              * If your VSCode version is built on an earlier version the example above may not work. Simple tests:
                    * Shouldn't work: note  deNOTEd  NOTEing
                    * Should work: NOTE:  "NOTE:"
              **/
            },
            "isWholeLine": false
        },
    ],
    // "todohighlight.keywordsPattern": "TODO:|FIXME:|\\(([^\\)]+)\\)", //highlight `TODO:`,`FIXME:` or content between parentheses
    // NOTE: remember to escape the backslash if there's any in your regexp (using \\\\ instead of single backslash)"
    "todohighlight.defaultStyle": {
        "color": "red",
        "backgroundColor": "#ffab00",
        "overviewRulerColor": "#ffab00",
        "cursor": "pointer",
        "border": "1px solid #eee",
        "borderRadius": "2px",
        "isWholeLine": false,
        //other styling properties goes here ... 
    },
    "todohighlight.include": [
        "**/*.js",
        "**/*.jsx",
        "**/*.ts",
        "**/*.tsx",
        "**/*.html",
        "**/*.php",
        "**/*.css",
        "**/*.scss",
        "**/*.md",
        "**/*.mmd",
        "**/*.markdown",
        "**/*.mdown",
        "**/*.txt",
        "**/*.rb",
        "**/*.go",
        "**/*.py",
        "**/*.pyw"
    ],
    "todohighlight.exclude": [
        "**/node_modules/**",
        "**/bower_components/**",
        "**/dist/**",
        "**/build/**",
        "**/.vscode/**",
        "**/.vscode-test/**",
        "**/.github/**",
        "**/_output/**",
        "**/*.min.*",
        "**/*.map",
        "**/.next/**"
    ],
    "todohighlight.maxFilesForSearch": 5120,
    "todohighlight.toggleURI": false,
    "editor.hover.above": false,
    "ruff.format.preview": true,
    "ruff.lint.preview": true,
    "ruff.exclude": [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".git-rewrite",
        ".hg",
        ".ipynb_checkpoints",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pyenv",
        ".pytest_cache",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        ".vscode",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "site-packages",
        "venv"
    ],
    "ruff.lint.extendSelect": [
        // "D", // docstring style
        "I", // isort
        "N", // naming conventions
        "UP", // pyupgrade -- catches obsolete code patterns
        "ANN", // type annotations
        "ASYNC", // async code checks
        "B", // flake8-bugbear -- catches bug-prone usage
        "C4", // list comprehensions
        "DTZ", // datetime mistakes -- also please use pendulum instead of datetime
        "FA", // correct use of `from __future__ import annotations`
        "INP", // checks for presence of __init__.py
        "T20", // print statements
        "TID", // tidy imports
        "PTH", // use pathlib instead of os.path
        "PLW", // pylint warnings
        "PLE", // pylint errors
    ],
    "ruff.lint.ignore": [
        "D100", // modules without top-of-module docstrings are okay
        "D104", // __init__.py doesn't need a docstring
        "D107", // __init__ method doesn't need a docstring
        "D2", // don't check whitespace in docstrings
        "D4", // don't check grammar and style in docstrings
        "E501", // long lines after auto-formatting, such as long strings, are okay
        "FA100", // it's sometimes okay to omit `from __future__ import annotations`
        "ANN002", // we don't demand a type on *args, particularly because it's difficult to specify
        "ANN003", // we don't demand a type on **kwargs, particularly because it's difficult to specify
        "UP007", // using Optional[X] instead of X | None is okay for now
        "PTH123", // we don't need to construct a Path just to open a file by filename
        "T201", // ignore prints
        "E712", // ignore A == B
        "N802" // ignore lowercase
    ],
    "workbench.editorAssociations": {
        "file:/**/*.csv": "jupyter-data-wrangler",
        "file:/**/*.tsv": "jupyter-data-wrangler"
    },
    "remote.SSH.connectTimeout": 30,
    "files.autoSave": "afterDelay",
    "interactiveWindow.executeWithShiftEnter": true,
    "ruff.lineLength": 88,
    "debug.showVariableTypes": true,
    "git.replaceTagsWhenPull": true,
    "postman.telemetry.enabled": false,
    "gitlens.telemetry.enabled": false,
    "telemetry.telemetryLevel": "off",
    "debugpy.showPythonInlineValues": true,
    "python.languageServer": "Pylance",
    "debug.terminal.clearBeforeReusing": true,
    "oneDarkPro.bold": true,
    "dataWrangler.experiments.autoDetectCsvDelimiter": true,
    "explorer.confirmDelete": false,
    "window.density.editorTabHeight": "compact",
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "github.copilot.chat.search.semanticTextResults": true,
    "gitlens.launchpad.indicator.enabled": false,
    "debug.openDebug": "neverOpen",
    "oneDarkPro.vivid": true,
    "workbench.colorTheme": "One Dark Pro Flat",
    "vscode_custom_css.imports": [
        "file:///Users/erik/Documents/VSCode/custom.css"
    ],
    "workbench.activityBar.location": "top",
    "monitor-pro.metrics": [
        "cpu",
        "memoryActive",
        "network",
        "cpuTemp"
    ],
    "vscode_custom_css.statusbar": false,
    "timeline.pageOnScroll": true,
    "diffEditor.hideUnchangedRegions.enabled": true,
    "terminal.integrated.allowedLinkSchemes": [
        "file",
        "http",
        "https",
        "mailto",
        "vscode",
        "vscode-insiders",
        "docker-desktop"
    ],
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "Provide specific suggestions to optimize the code for faster execution."
        },
        {
            "text": "Provide specific suggestions to improve the readability of the code."
        },
        {
            "text": "DO NOT provide inline comments."
        }
    ],
    "workbench.panel.showLabels": false,
    "editor.occurrencesHighlightDelay": 0,
    "terminal.integrated.fontFamily": "MesloLGS NF",
    "editor.fontFamily": "MesloLGS NF, Menlo, Monaco, 'Courier New', monospace",
    "editor.smoothScrolling": true,
    "workbench.settings.applyToAllProfiles": [
        "editor.stickyScroll.enabled",
        "editor.scrollBeyondLastColumn",
        "github.copilot.nextEditSuggestions.enabled"
    ],
    "editor.scrollBeyondLastColumn": 0,
    "gitlens.views.scm.grouped.views": {
        "commits": true,
        "branches": true,
        "remotes": true,
        "stashes": true,
        "tags": true,
        "worktrees": true,
        "contributors": true,
        "repositories": false,
        "searchAndCompare": true,
        "launchpad": false
    },
    "testing.automaticallyOpenTestResults": "openOnTestFailure",
    "workbench.iconTheme": "material-icon-theme",
    "editor.suggest.preview": true,
    "editor.scrollbar.verticalScrollbarSize": 0,
    "notebook.output.textLineLimit": 300,
    "notebook.output.scrolling": true,
    "ruff.nativeServer": "on",
    "notebook.variablesView": true,
    "chat.experimental.statusIndicator.enabled": true,
    "workbench.settings.useWeightedKeySearch": true,
    "notebook.diff.experimental.toggleInline": true,
    "terminal.integrated.suggest.enabled": true,
    "chat.agent.enabled": true,
    "window.titleBarStyle": "custom",
    "editor.autoIndent": "advanced",
    "errorLens.enabledDiagnosticLevels": [
        "warning",
        "info",
        "error"
    ],
    "editor.inlineSuggest.edits.showCollapsed": true,
    "github.copilot.chat.agent.thinkingTool": true,
    "terminal.integrated.profiles.linux": {
        "bash": {
            "path": "bash",
            "icon": "terminal-bash"
        },
        "zsh": {
            "path": "zsh"
        },
        "fish": {
            "path": "fish"
        },
        "tmux": {
            "path": "tmux",
            "icon": "terminal-tmux"
        },
        "pwsh": {
            "path": "pwsh",
            "icon": "terminal-powershell"
        },
        "sh": {
            "path": "/bin/sh"
        }
    },
    "terminal.integrated.defaultProfile.linux": "bash",
    "terminal.integrated.gpuAcceleration": "on",
    "terminal.integrated.enableImages": true,
    "terminal.integrated.defaultProfile.osx": "zsh",
    "gitlens.ai.model": "vscode",
    "gitlens.ai.vscode.model": "copilot:gpt-4.1",
    "editor.experimentalGpuAcceleration": "on",
    "github.copilot.chat.codesearch.enabled": true,
}